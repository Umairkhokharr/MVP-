import streamlit as st
from PIL import Image
import base64
import io

# Set page configuration
st.set_page_config(
    page_title="MerchSentAI",
    layout="centered",
    page_icon="🛍️"
)

# Function to load image from base64
def get_base64_image(b64_string):
    try:
        if b64_string.startswith('data:image'):
            image_data = base64.b64decode(b64_string.split(',')[1])
        else:
            image_data = base64.b64decode(b64_string)
        return Image.open(io.BytesIO(image_data))
    except Exception as e:
        st.error(f"Error loading image: {str(e)}")
        return None

# Main app function
def main():
    # App header
    st.title("🛍️ MerchSentAI")
    st.markdown("### AI-powered Merchandise Sentiment Analysis")
    
    # Image processing section
    st.header("🖼️ Image Upload")
    uploaded_file = st.file_uploader("Upload merchandise image", type=["jpg", "jpeg", "png"])
    
    if uploaded_file is not None:
        try:
            image = Image.open(uploaded_file)
            st.image(image, caption="Uploaded Image", use_column_width=True)
            st.success("✅ Image successfully processed!")
        except Exception as e:
            st.error(f"❌ Error processing image: {str(e)}")
    
    # Base64 image input
    st.header("📥 Base64 Image Input")
    base64_input = st.text_area("Paste base64-encoded image data:", height=150)
    
    if st.button("Decode Base64") and base64_input:
        with st.spinner("Decoding image..."):
            decoded_image = get_base64_image(base64_input)
            if decoded_image:
                st.image(decoded_image, caption="Decoded Image", use_column_width=True)
                st.success("✅ Image decoded successfully!")
    
    # Sentiment analysis section
    st.header("😊 Sentiment Analysis")
    user_input = st.text_area("Enter customer feedback about merchandise:", height=100)
    
    if st.button("Analyze Sentiment") and user_input:
        with st.spinner("Analyzing sentiment..."):
            # Mock analysis (replace with your real model)
            positive_score = min(len(user_input)/100, 0.95)
            negative_score = 1 - positive_score
            
            st.subheader("Analysis Results")
            col1, col2 = st.columns(2)
            col1.metric("Positive Sentiment", f"{positive_score*100:.1f}%")
            col2.metric("Negative Sentiment", f"{negative_score*100:.1f}%")
            
            # Visual indicator
            st.progress(positive_score)
            
            # Sample insights
            if positive_score > 0.7:
                st.success("🌟 Excellent feedback! Customers love your merchandise.")
            else:
                st.warning("⚠️ Some concerns detected. Consider improving product quality.")

# Run the app
if __name__ == "__main__":
    main()
